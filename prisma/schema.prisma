// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

enum CategoryEnum {
  Uroda
  Gry
  Wyjazdy
  Zwierzeta
  Moda
  Inne
}

enum ProductCategoryEnum {
  Zawbawki
  Ubrania
}

enum OrderStatus {
  CREATED
  PAID
  CANCELED
}

enum Role {
  ADMIN
  USER
}

model Category {
  id       CategoryEnum @id
  name     String
  color    String
  BlogPost BlogPost[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String     @id @default(cuid())
  name              String?
  surname           String?
  email             String?    @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  resetToken        String?
  verificationToken String?
  accounts          Account[]
  // sessions          Session[]
  Comment           Comment[]
  BlogPost          BlogPost[]
  Film              Film[]
  role              Role       @default(USER)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Order             Order[]
}

model Comment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  BlogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Film {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String
  subtitle  String
  slug      String   @unique
  url       String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  published   Boolean      @default(false)
  publishedAt DateTime?
  title       String       @unique @db.VarChar(255)
  subtitle    String       @db.Text
  content     String       @db.Text
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  CategoryEnum
  imgURL      String?
  slug        String       @unique
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  Comment     Comment[]
}

model ProductCategory {
  id      ProductCategoryEnum @id
  name    String
  color   String
  Product Product[]
}

model Product {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  publishedAt       DateTime?
  price             Float               @default(0) @db.DoublePrecision
  name              String              @unique @db.VarChar(255)
  shortDescription  String              @db.VarChar(255)
  description       String              @db.Text
  category          ProductCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        ProductCategoryEnum
  imgURL            String?
  slug              String              @unique
  ProductOrderPivot ProductOrderPivot[]
}

model Order {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            OrderStatus         @default(CREATED)
  total             Float               @default(0) @db.DoublePrecision
  User              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
  email             String?
  ProductOrderPivot ProductOrderPivot[]
  Payment           Payment[]
}

model ProductOrderPivot {
  quantity  Float
  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([productId, orderId])
}

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  method    String
  currency  String
  amount    Float    @default(0) @db.DoublePrecision
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
}
