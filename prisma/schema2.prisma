// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

enum CategoryEnum {
  Uroda
  Gry
  Wyjazdy
  Zwierzeta
  Moda
  Inne
}

enum Role {
  ADMIN
  USER
}

model Category {
  id       CategoryEnum @id
  name     String
  color    String
  BlogPost BlogPost[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  surname       String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  resertToken   String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
  BlogPost      BlogPost[]
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  BlogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String
  User       User     @relation(fields: [userId], references: [id])
  userId     String
}

model BlogPost {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  published   Boolean      @default(false)
  publishedAt DateTime?
  title       String       @unique @db.VarChar(255)
  subtitle    String       @db.Text
  content     String       @db.Text
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  CategoryEnum
  imgURL      String?
  slug        String       @unique
  // author      User         @relation(fields: [authorId], references: [id])
  // authorId    String
  // Comment     Comment[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
  Comment     Comment[]
}
